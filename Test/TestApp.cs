using System;
using System.Text;
using System.IO;
using System.Reflection;
using Shone;

namespace Test
{
    public class TestApp
    {
        static string dir = @"C:\Hjx\Shone2020\Shone.Math\Src\AutoGenerated\";
        static void Main(string[] args)
        {
            //GenTNumCode();
            //GenTArrayCode();
            //GenTIEnumerCode();

            Console.WriteLine();
            Console.WriteLine(Math<float>.PI);
            Console.WriteLine(Math<float>.Pow(5, 3));
            Console.WriteLine();
            Console.ReadKey();
        }

        static void GenMethods(StringBuilder sb, Type t, string name)
        {
            if (MyReflection.Op1NameMaps.ContainsKey(name))
                sb.Append($"        public static {t} {name}({t} x) => {MyReflection.Op1NameMaps[name]} x;\r\n");
            else if (MyReflection.Op2NameMaps.ContainsKey(name))
                sb.Append($"        public static {t} {name}({t} x, {t} y) => x {MyReflection.Op2NameMaps[name]} y;\r\n");
            else if (MyReflection.Op2bNameMaps.ContainsKey(name))
                sb.Append($"        public static bool {name}({t} x, {t} y) => x {MyReflection.Op2bNameMaps[name]} y;\r\n");
        }

        static void GenTNumCode()
        {
            var sb = new StringBuilder(1024);
            sb.Append(@"using System;

//All rights reserved to Shone, author of Shone.Math (https://github.com/shonescript/Shone.Math).
namespace Shone
{
    /// <summary>
    /// Helper class auto gerated for generic number T extension
    /// </summary>
    public static class MyNumber
    {
");
            var mt = typeof(Math<double>);
            Console.WriteLine(mt);
            var fs = mt.GetFields(MyReflection.PublicStatic);
            foreach (var f in fs)
            {
                var name = f.Name;
                if (name.StartsWith("From")) continue;
                var o = f.GetValue(null);
                if (o is Delegate d)
                {
                    if (name.StartsWith("Asinh")) sb.Append("#if Net5\r\n");
                    var m = d.Method;
                    sb.Append($"        public static {TStr(m.ReturnType, name)} {name}<T>(this ");
                    var paras = m.GetParameters();
                    var n = paras.Length;
                    for (int i = 0; i < n; i++)
                    {
                        var p = paras[i].ParameterType;
                        if (i > 0) sb.Append(", ");
                        sb.Append($"{TStr(p, name, true)} a{i + 1}");
                    }
                    sb.Append($") => Math<T>.{name}(");
                    for (int i = 0; i < n; i++)
                    {
                        if (i > 0) sb.Append(", ");
                        sb.Append($"a{i + 1}");
                    }
                    sb.Append($");\r\n");
                    if (name.StartsWith("Atanh")) sb.Append("#endif\r\n");
                }
            }
            sb.Append(@"
    }
}");
            File.WriteAllText(dir + "MyNumber.cs", sb.ToString(), System.Text.Encoding.Default);
        }
        static string TStr(Type t, string name, bool inPara = false)
        {
            return t == MyType.Double && ((inPara && name == "ToDouble") || !name.EndsWith("Double")) ? "T" : t.Name;
        }

        static void GenTArrayCode()
        {
            var sb = new StringBuilder(1024);
            sb.Append(@"using System;

//All rights reserved to Shone, author of Shone.Math (https://github.com/shonescript/Shone.Math).
namespace Shone
{
    /// <summary>
    /// Helper class auto gerated for generic array T[] extension
    /// </summary>
    public static partial class MyArray
    {
");
            var mt = typeof(Math<double>);
            Console.WriteLine(mt);
            var fs = mt.GetFields(MyReflection.PublicStatic);
            foreach (var f in fs)
            {
                var name = f.Name;
                if (name.StartsWith("From")) continue;
                var o = f.GetValue(null);
                if (o is Delegate d)
                {
                    if (name.StartsWith("Asinh")) sb.Append("#if Net5\r\n");
                    var method = d.Method;
                    AddArrayMethod(sb, name, method);
                    AddArrayMethod(sb, name, method, true);
                    if (name.StartsWith("Atanh")) sb.Append("#endif\r\n");
                }
            }
            sb.Append(@"
    }
}");
            File.WriteAllText(dir + "MyArray.cs", sb.ToString(), System.Text.Encoding.Default);
        }
        static void AddArrayMethod(StringBuilder sb, string name, MethodInfo m, bool bSpecial = false)
        {
            var paras = m.GetParameters();
            var n = paras.Length;
            if (bSpecial && n != 2) return;

            sb.Append($"        public static {TStr(m.ReturnType, name)}[] {name}<T>(this ");
            for (int i = 0; i < n; i++)
            {
                var p = paras[i].ParameterType;
                var s = "[]";
                if (i > 0)
                {
                    sb.Append(", ");
                    if (bSpecial) s = "";
                }
                sb.Append($"{TStr(p, name, true)}{s} a{i + 1}");
            }
            sb.Append($") => Map(");
            for (int i = 0; i < n; i++)
            {
                sb.Append($"a{i + 1}");
                sb.Append(", ");
            }
            sb.Append($"Math<T>.{name});\r\n");
        }

        static void GenTIEnumerCode()
        {
            var sb = new StringBuilder(1024);
            sb.Append(@"using System;
using System.Collections.Generic;

//All rights reserved to Shone, author of Shone.Math (https://github.com/shonescript/Shone.Math).
namespace Shone
{
    /// <summary>
    /// Helper class auto gerated for generic IEnumerable<T> extension
    /// </summary>
    public static partial class MyIEnumerable
    {
");
            var mt = typeof(Math<double>);
            Console.WriteLine(mt);
            var fs = mt.GetFields(MyReflection.PublicStatic);
            foreach (var f in fs)
            {
                var name = f.Name;
                if (name.StartsWith("From")) continue;
                var o = f.GetValue(null);
                if (o is Delegate d)
                {
                    if (name.StartsWith("Asinh")) sb.Append("#if Net5\r\n");
                    var method = d.Method;
                    AddTIEnumerMethod(sb, name, method);
                    if (name.StartsWith("Atanh")) sb.Append("#endif\r\n");
                }
            }
            sb.Append(@"
    }
}");
            File.WriteAllText(dir + "MyIEnumerable.cs", sb.ToString(), System.Text.Encoding.Default);
        }
        static void AddTIEnumerMethod(StringBuilder sb, string name, MethodInfo m)
        {
            var paras = m.GetParameters();
            var n = paras.Length;

            sb.Append($"        public static IEnumerable<{TStr(m.ReturnType, name)}> {name}<T>(this ");
            for (int i = 0; i < n; i++)
            {
                var p = paras[i].ParameterType;
                if (i == 0)
                {
                    sb.Append($"IEnumerable<{TStr(p, name, true)}> a1");
                }
                else
                {
                    sb.Append($", {TStr(p, name, true)} a{i + 1}");
                }
            }
            sb.Append($") => Map(");
            for (int i = 0; i < n; i++)
            {
                sb.Append($"a{i + 1}");
                sb.Append(", ");
            }
            sb.Append($"Math<T>.{name});\r\n");
        }
    }
}
